import numpy as np
from python_tsp.heuristics import solve_tsp_simulated_annealing
import copy
import math
import time
import random
import itertools as it

discarded_lines = 0

class DrawObject:
    def __init__(self, id):
        self.begin = []
        self.end = []

        self.id = id
        self.Gcode = []

    def __repr__(self):
        return f"{self.id}"
        
        
    def get_gcode(self):
        global discarded_lines
        gcode = []
        for line in self.Gcode:
            if (len(gcode) == 0) or (line != gcode[-1]):
                gcode.append(line)
            else:
                discarded_lines+=1
        return gcode
        
def parse_gcode(filename):
    objects = []
    id = 1
    tmp = DrawObject(0)
    tmp.begin = [30000, 25000]
    tmp.end = [30000, 25000]
    objects.append(copy.deepcopy(tmp))
    with open(filename, "r") as gcode:
        data = gcode.readlines()
        tmp = DrawObject(id)
        for i, line in enumerate(data):
            line = line.strip()
            if line.startswith('G0'):
                tmp.Gcode.append(line)

                elements = line.split(' ')
                for e in elements:
                    c = e[0]
                    if c == 'X':
                        tmp.begin.append(int(e.strip()[1:]))
                    if c == 'Y':
                        tmp.begin.append(int(e.strip()[1:]))

            elif line.startswith('G1') and (data[i+1].startswith('G0') or (i+1 == len(data)) or data[i+1].startswith('G28')) :
                tmp.Gcode.append(line)

                elements = line.split(' ')
                for e in elements:
                    c = e[0]
                    if c == 'X':
                        tmp.end.append(int(e.strip()[1:]))
                    if c == 'Y':
                        tmp.end.append(int(e.strip()[1:]))
                objects.append(copy.deepcopy(tmp))

                id +=1 
                tmp = DrawObject(id)
                
            else:
                tmp.Gcode.append(line)

    return objects

def write_route_gcode_to_file(objects, route, filename):
    with open(filename, "w") as gcode:
        for index in route:
            code = objects[index].get_gcode()
            for line in code:
                gcode.write(line + "\n")
        gcode.write("G28\n")
# ##################################################

def calculateDistance(x1,y1,x2,y2):
    dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    return dist

# def calculate_dist_route(route):
    dist = calculateDistance(0, 0, route[0].begin[0], route[0].begin[1])
    for i in range(len(route)-1):
        dist += calculateDistance(route[i].end[0], route[i].end[1], route[i+1].begin[0], route[i+1].begin[1])
    dist += route[-1].end[0]+route[-1].end[1]

    return dist
    

def calculate_matrix(objects):
    matrix = np.zeros((len(objects), len(objects)), dtype=int)
    for index in range(len(objects)):
        for index2 in range(len(objects)):
            if index == index2:
                matrix[index][index2]=0
            else:
                matrix[index][index2]=calculateDistance(objects[index].end[0], objects[index].end[1], objects[index2].begin[0], objects[index2].begin[1])    
    return matrix

if __name__ == "__main__":
    objects = parse_gcode('test.txt')
    t = time.time()
    distance_matrix = calculate_matrix(objects)
    dt = time.time() - t
    print("Time to calculate matrix is ", dt, " seconds\nSize of matrix: ", len(objects))
    # permutation, distance = solve_tsp_simulated_annealing(distance_matrix, max_processing_time=600)
    # print("permutation: ", permutation)
    permutation = [0, 143, 1115, 1079, 1081, 1110, 1109, 1117, 1148, 1149, 1211, 349, 297, 298, 142, 314, 198, 1150, 240, 243, 381, 245, 234, 1212, 239, 1232, 315, 316, 218, 1111, 1259, 1256, 1257, 386, 387, 1275, 399, 1264, 867, 868, 440, 439, 858, 857, 436, 856, 432, 411, 424, 866, 1299, 859, 426, 865, 434, 422, 415, 406, 855, 854, 419, 842, 414, 417, 860, 451, 478, 923, 922, 905, 561, 563, 1347, 1348, 1475, 1337, 553, 576, 1320, 944, 573, 605, 1454, 1353, 1355, 1458, 1456, 1361, 1535, 1492, 631, 1500, 1507, 1501, 1498, 1496, 584, 1343, 1345, 577, 630, 624, 1488, 595, 546, 554, 538, 496, 492, 509, 526, 516, 385, 1253, 1248, 1225, 1107, 1163, 216, 312, 1158, 146, 1093, 308, 175, 140, 289, 150, 161, 109, 1076, 110, 93, 284, 45, 1031, 1028, 1044, 1078, 186, 1080, 1065, 126, 288, 285, 103, 1142, 360, 361, 833, 835, 836, 398, 370, 346, 373, 1236, 375, 1249, 384, 1233, 1235, 380, 1276, 435, 872, 430, 871, 394, 1274, 427, 487, 501, 453, 873, 473, 450, 875, 379, 389, 366, 367, 1224, 1250, 1165, 188, 180, 135, 129, 152, 151, 159, 177, 181, 310, 1133, 1135, 1119, 189, 1130, 1129, 354, 388, 428, 429, 1313, 528, 519, 939, 484, 480, 952, 1319, 1314, 562, 1321, 582, 536, 961, 602, 1477, 1450, 1357, 1362, 1459, 1364, 1366, 1370, 1378, 1382, 1380, 1398, 1409, 1405, 1539, 1455, 1372, 1381, 1401, 1662, 1661, 1471, 1388, 1363, 1359, 969, 622, 640, 1389, 1469, 1641, 1653, 1640, 1412, 1655, 1639, 1642, 1652, 1432, 1779, 1666, 1797, 1434, 1437, 1438, 798, 805, 1778, 1474, 1800, 1782, 810, 1802, 813, 808, 811, 806, 797, 1784, 1807, 814, 1023, 1786, 1715, 1684, 1669, 1670, 1658, 720, 731, 743, 1636, 737, 1632, 1631, 1625, 723, 1628, 1619, 1559, 1554, 1601, 1598, 1552, 1555, 1595, 1562, 1612, 1596, 1556, 708, 703, 1536, 974, 632, 654, 662, 1542, 591, 893, 963, 894, 623, 607, 620, 601, 628, 1479, 634, 636, 1485, 606, 1338, 1344, 1340, 1339, 559, 959, 621, 1449, 1350, 1360, 1460, 1451, 1465, 1374, 1387, 1375, 1390, 1462, 1605, 1400, 1408, 1411, 1594, 1376, 1368, 1377, 1574, 1464, 680, 1007, 712, 1410, 1418, 1014, 1002, 1609, 1610, 1629, 741, 1630, 1731, 785, 756, 1717, 765, 1686, 757, 767, 1761, 1022, 790, 769, 1788, 812, 1794, 787, 1789, 1790, 791, 1737, 1760, 1753, 1803, 1804, 801, 789, 782, 788, 794, 1787, 1795, 1785, 1781, 783, 1742, 1722, 1721, 1001, 707, 711, 675, 1573, 709, 706, 715, 1681, 749, 742, 736, 1010, 1537, 1540, 987, 986, 980, 659, 664, 653, 978, 641, 612, 618, 541, 470, 1300, 464, 474, 488, 927, 510, 521, 949, 549, 953, 512, 490, 552, 930, 966, 967, 1528, 1526, 984, 985, 661, 658, 655, 643, 644, 647, 1493, 1527, 1532, 666, 1548, 671, 981, 670, 656, 1543, 1580, 1553, 1572, 672, 674, 1566, 1560, 1561, 1558, 1597, 1576, 1545, 1009, 685, 1544, 1551, 1577, 1563, 1620, 1627, 1599, 1600, 1564, 1557, 744, 1634, 750, 1635, 1637, 1680, 1679, 1708, 1756, 1736, 752, 1638, 738, 1626, 739, 686, 979, 682, 716, 740, 1015, 1770, 1771, 1769, 1768, 1758, 1741, 772, 1687, 796, 1801, 1442, 1798, 1808, 1447, 1444, 1809, 1446, 1440, 1436, 1805, 1441, 1667, 1439, 1700, 1430, 1701, 1695, 1698, 1706, 1651, 1692, 1431, 1727, 1725, 1707, 1650, 1710, 1720, 1426, 1435, 1776, 1665, 1385, 1386, 1461, 1384, 1393, 1470, 1466, 1358, 1453, 965, 610, 1476, 608, 604, 592, 917, 1323, 527, 1312, 1310, 482, 1311, 924, 565, 533, 545, 954, 955, 1309, 531, 1325, 1335, 547, 583, 1342, 569, 578, 1483, 645, 638, 639, 676, 705, 694, 702, 1593, 1402, 1690, 1694, 1728, 1416, 1633, 1657, 1688, 1420, 1704, 1705, 1726, 1724, 1739, 1429, 1427, 1648, 1647, 1643, 1654, 1659, 1644, 1423, 1649, 1711, 1415, 1413, 1414, 1663, 1660, 1403, 1395, 1623, 1419, 1018, 763, 1754, 1422, 1730, 1729, 1693, 1697, 1703, 1799, 807, 1792, 1775, 1750, 1738, 802, 809, 786, 779, 777, 792, 1747, 1749, 1421, 700, 717, 681, 699, 1568, 1008, 713, 1392, 1399, 1406, 1394, 1391, 1468, 690, 684, 677, 1513, 692, 691, 1617, 722, 1591, 1607, 1592, 1606, 1604, 1003, 695, 1518, 1519, 1522, 1524, 1463, 1531, 970, 627, 1516, 1523, 1489, 1346, 1504, 1512, 1499, 968, 1497, 1508, 698, 1590, 1602, 1613, 1006, 696, 687, 710, 678, 1515, 1502, 1509, 585, 566, 571, 594, 892, 957, 535, 530, 525, 524, 846, 1328, 568, 1322, 567, 891, 515, 883, 879, 887, 900, 458, 882, 479, 926, 471, 881, 890, 600, 613, 973, 975, 629, 1541, 1491, 1534, 665, 668, 992, 993, 1505, 971, 1514, 581, 1341, 590, 599, 1331, 936, 1478, 943, 572, 611, 906, 574, 1373, 1367, 1371, 1452, 1365, 1383, 1457, 1369, 1379, 1467, 1396, 1618, 1397, 1407, 1664, 1433, 1755, 1428, 1472, 1740, 1425, 1702, 1699, 1696, 1734, 1735, 1745, 1766, 1791, 1796, 1748, 1744, 1751, 1777, 1765, 1691, 758, 746, 721, 725, 729, 1404, 1622, 1723, 1752, 1743, 730, 734, 1473, 1417, 1646, 1672, 1656, 1645, 1709, 1682, 1424, 804, 1443, 1445, 803, 793, 1024, 1763, 1746, 1764, 764, 795, 1780, 1767, 1026, 800, 1773, 1772, 1025, 1783, 799, 1806, 784, 775, 778, 761, 774, 754, 1017, 1712, 1719, 760, 771, 780, 1716, 1718, 1714, 1683, 1689, 1678, 755, 759, 1713, 762, 1759, 1020, 1021, 1793, 1762, 766, 1671, 745, 747, 1016, 1614, 718, 1589, 1621, 751, 1685, 753, 773, 770, 1677, 1668, 1674, 1673, 1012, 748, 776, 728, 1624, 1608, 1611, 1676, 1675, 1732, 1757, 1019, 768, 1774, 781, 1733, 1013, 732, 726, 719, 1506, 1510, 995, 683, 701, 1603, 714, 1000, 999, 735, 1584, 689, 1585, 1567, 1511, 1495, 964, 1490, 1494, 646, 1487, 1486, 1484, 960, 609, 603, 506, 483, 537, 513, 499, 502, 489, 468, 469, 461, 1288, 254, 1287, 1185, 251, 1182, 227, 233, 1243, 247, 246, 248, 1244, 236, 1252, 1215, 1245, 1278, 1200, 1202, 378, 391, 1269, 1268, 326, 1262, 1296, 1183, 1184, 220, 225, 1188, 185, 324, 307, 1169, 1170, 322, 317, 1122, 191, 87, 83, 99, 73, 78, 1071, 166, 300, 305, 190, 303, 302, 123, 1062, 155, 147, 172, 210, 232, 215, 244, 382, 840, 1267, 1254, 383, 822, 1124, 818, 365, 551, 556, 938, 580, 597, 945, 1349, 1351, 1352, 1448, 904, 876, 861, 455, 902, 511, 1307, 475, 460, 454, 1302, 915, 912, 1305, 1303, 403, 852, 416, 497, 477, 935, 557, 462, 465, 851, 404, 862, 824, 820, 1263, 823, 1270, 1283, 864, 358, 219, 200, 1157, 1258, 1191, 237, 1241, 1201, 1203, 1205, 1229, 1189, 1208, 321, 204, 320, 238, 168, 144, 1095, 108, 90, 1048, 332, 272, 46, 1041, 61, 57, 131, 170, 89, 1051, 1039, 1045, 1038, 48, 96, 127, 130, 118, 138, 1091, 1086, 119, 38, 30, 1042, 28, 69, 1066, 296, 194, 105, 117, 1037, 41, 261, 31, 1052, 1087, 1040, 1047, 271, 19, 260, 17, 258, 1068, 104, 66, 209, 1097, 1082, 86, 1, 1085, 122, 1070, 141, 301, 213, 1181, 304, 1192, 1294, 1298, 1286, 1289, 1197, 230, 195, 125, 113, 1073, 1049, 1050, 32, 43, 91, 1096, 164, 1112, 153, 148, 173, 344, 817, 816, 169, 1083, 132, 133, 111, 1120, 158, 1057, 120, 102, 1088, 1090, 1159, 207, 311, 1092, 1074, 128, 145, 1084, 121, 1138, 309, 163, 157, 193, 179, 174, 1077, 53, 68, 283, 287, 1131, 1132, 345, 1161, 1223, 1209, 1174, 1175, 1147, 1128, 1134, 1136, 1216, 1180, 1213, 1167, 348, 1166, 1156, 1173, 299, 1151, 71, 79, 65, 282, 60, 1027, 336, 44, 34, 1043, 40, 333, 37, 1034, 39, 268, 1029, 76, 1075, 274, 273, 1059, 338, 1030, 331, 335, 328, 8, 269, 23, 3, 6, 5, 257, 4, 256, 275, 292, 106, 281, 277, 279, 70, 259, 36, 42, 330, 11, 2, 10, 67, 1061, 21, 1056, 82, 94, 51, 24, 52, 1046, 77, 85, 293, 263, 27, 266, 47, 63, 92, 291, 62, 88, 115, 80, 203, 356, 831, 351, 347, 1154, 318, 231, 196, 1153, 192, 167, 154, 295, 363, 362, 837, 1251, 442, 498, 491, 486, 914, 913, 507, 467, 472, 494, 523, 916, 910, 911, 934, 1218, 393, 405, 390, 1164, 1145, 202, 1089, 124, 107, 98, 1060, 112, 134, 162, 1067, 14, 337, 7, 15, 340, 1069, 1058, 178, 165, 343, 114, 156, 205, 206, 1152, 1126, 397, 843, 418, 395, 423, 869, 514, 503, 517, 880, 443, 907, 544, 558, 625, 633, 976, 1482, 972, 895, 617, 1525, 649, 650, 642, 550, 548, 495, 493, 874, 1292, 1282, 1198, 1281, 407, 1280, 412, 253, 1187, 176, 212, 100, 1054, 1162, 199, 214, 1219, 1190, 441, 252, 1277, 249, 1273, 1284, 1196, 1193, 421, 1195, 1204, 1271, 1265, 420, 456, 1199, 463, 897, 1291, 1293, 437, 1306, 933, 518, 1326, 958, 626, 928, 598, 931, 481, 908, 925, 929, 1480, 637, 1538, 657, 697, 1569, 1570, 1575, 1549, 1546, 977, 1533, 1529, 1530, 988, 982, 1571, 688, 1565, 1550, 733, 1586, 724, 1616, 1011, 1615, 727, 1581, 1579, 1547, 1578, 1582, 1587, 1588, 1583, 704, 663, 1004, 648, 989, 990, 660, 651, 1481, 564, 587, 614, 635, 991, 673, 994, 693, 1005, 996, 669, 997, 679, 667, 983, 998, 652, 1503, 1521, 1520, 1517, 1354, 593, 596, 615, 1356, 1336, 956, 505, 844, 449, 431, 452, 485, 884, 886, 885, 878, 877, 504, 409, 1260, 226, 222, 211, 838, 839, 827, 829, 830, 825, 1261, 396, 408, 392, 372, 834, 1239, 223, 1140, 1139, 1113, 1116, 1114, 1104, 1100, 1143, 1101, 1155, 1105, 355, 821, 171, 184, 342, 828, 371, 832, 841, 1227, 410, 400, 444, 459, 853, 863, 401, 847, 1266, 1290, 899, 520, 522, 948, 560, 532, 888, 889, 950, 534, 539, 529, 940, 1324, 589, 1327, 579, 1329, 951, 586, 588, 575, 540, 845, 1317, 1318, 445, 870, 1285, 1308, 946, 932, 947, 909, 457, 1304, 1237, 448, 919, 918, 898, 896, 466, 325, 250, 1295, 1186, 1297, 1301, 1246, 235, 228, 306, 323, 1214, 1228, 1221, 1272, 1194, 433, 1220, 221, 1141, 224, 1279, 242, 1242, 1206, 1207, 197, 1168, 1121, 1072, 319, 241, 208, 201, 1127, 160, 1103, 1171, 1125, 1222, 1178, 374, 1226, 826, 353, 350, 1106, 1102, 1137, 1108, 1144, 1063, 101, 97, 278, 50, 265, 264, 29, 267, 16, 18, 26, 1033, 58, 64, 49, 54, 262, 13, 329, 20, 74, 294, 136, 183, 280, 84, 56, 276, 59, 1036, 55, 1055, 33, 255, 327, 12, 9, 25, 334, 35, 22, 1032, 75, 270, 1053, 1035, 339, 341, 815, 139, 149, 1098, 1099, 1123, 1255, 1176, 1177, 313, 229, 364, 357, 359, 1230, 1238, 1234, 368, 1210, 1247, 1240, 369, 376, 377, 848, 413, 402, 849, 500, 1316, 1330, 570, 616, 619, 962, 1334, 1333, 1332, 555, 937, 1315, 542, 543, 942, 920, 941, 508, 476, 901, 903, 921, 447, 438, 425, 446, 850, 1231, 1217, 819, 352, 217, 1172, 1179, 1146, 187, 1094, 1160, 1118, 182, 290, 286, 72, 81, 95, 137, 116, 1064]
    # print("distance: ", distance)
    write_route_gcode_to_file(objects, permutation, "output.txt")
    print("Discarded: ", discarded_lines)